generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CourseType {
  online
  video
  text
}

enum CourseLessonType {
  Quizz
  Lecture
  Text
}

model Course {
  id               Int              @id @default(autoincrement())
  title            String
  type             CourseType
  seo              String?
  description      String?
  slug             String           @unique
  defaultSales     Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  price            Float            @default(0)
  promotionalPrice Float?
  modules          CourseModule[]
  EnrollmentItem   EnrollmentItem[]
  Purchase         Purchase[]
  draft            Boolean          @default(true)
  hasSuport        Boolean          @default(false)
  hasCertificate   Boolean          @default(false)
  hasForum         Boolean          @default(false)
  hasSubscription  Boolean          @default(false)
  private          Boolean          @default(false)
  pageId           Int?
  Page             Page?
}

model CourseModule {
  id       Int            @id @default(autoincrement())
  title    String
  courseId Int
  course   Course         @relation(fields: [courseId], references: [id])
  lessons  CourseLesson[]
  order    Int            @default(0)
}

model CourseLesson {
  id             Int              @id @default(autoincrement())
  title          String
  content        String?
  vimeoId        String?
  type           CourseLessonType
  courseModule   CourseModule     @relation(fields: [courseModuleId], references: [id], onDelete: Cascade)
  courseModuleId Int
  order          Int              @default(0)
}

model User {
  id          Int              @id @default(autoincrement())
  username    String           @unique
  displayName String?
  password    String
  email       String           @unique
  roleId      Int
  role        Role             @relation(fields: [roleId], references: [id])
  cart        EnrollmentCart?
  purchases   Purchase[]
  permissions UserPermission[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  users       User[]
  permissions RolePermission[]
  Config      Config[]
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  user         User       @relation(fields: [userId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
}

model Config {
  id            Int  @id @default(autoincrement())
  defaultRole   Role @relation(fields: [defaultRoleId], references: [id])
  defaultRoleId Int
}

model EnrollmentCart {
  id     String           @id @default(uuid())
  userId Int              @unique
  user   User             @relation(fields: [userId], references: [id])
  items  EnrollmentItem[]
}

model EnrollmentItem {
  id         String         @id @default(uuid())
  cartId     String
  cart       EnrollmentCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  courseId   Int
  course     Course         @relation(fields: [courseId], references: [id])
  priceAtAdd Decimal // ðŸ”¥ PreÃ§o do curso no momento da adiÃ§Ã£o
}

model Purchase {
  id          String   @id @default(uuid())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  pricePaid   Decimal // ðŸ“Œ PreÃ§o que o usuÃ¡rio pagou pelo curso
  purchasedAt DateTime @default(now())
}

model Page {
  id         Int             @id @default(autoincrement())
  course     Course?         @relation(fields: [courseId], references: [id])
  components PageComponent[]
  courseId   Int?            @unique
}

model PageComponent {
  id       Int           @id @default(autoincrement())
  pageId   Int
  page     Page          @relation(fields: [pageId], references: [id], onDelete: Cascade)
  type     ComponentType
  order    Int           @default(0) // Para ordenar os componentes na pÃ¡gina
  settings Json // ðŸ”¥ ConfiguraÃ§Ãµes dinÃ¢micas do componente
}

enum ComponentType {
  About
  Clients
  Discount
  InstitutionalArea
  StatsSection
}
